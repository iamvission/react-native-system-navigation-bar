{"version":3,"sources":["index.tsx"],"names":["NavigationBar","NativeModules","navigationHide","Platform","OS","navigationShow","leanBack","immersive","stickyImmersive","lowProfile","lightNavigationBar","light","setNavigationColor","color","setNavigationBarDividerColor","setNavigationBarContrastEnforced","enforceContrast","fullScreen","enable","SystemNavigationBar"],"mappings":";;;;;;;AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,0BAA1B;;AAEA,MAAMC,cAAc,GAAG,YAAY;AACjC,MAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACE,cAAd,EAAb;AACD;AACF,CAJD;;AAMA,MAAMG,cAAc,GAAG,YAAY;AACjC,MAAIF,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACK,cAAd,EAAb;AACD;AACF,CAJD;;AAMA,MAAMC,QAAQ,GAAG,YAAY;AAC3B,MAAIH,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACM,QAAd,EAAb;AACD;AACF,CAJD;;AAMA,MAAMC,SAAS,GAAG,YAAY;AAC5B,MAAIJ,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACO,SAAd,EAAb;AACD;AACF,CAJD;;AAMA,MAAMC,eAAe,GAAG,YAAY;AAClC,MAAIL,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACQ,eAAd,EAAb;AACD;AACF,CAJD;;AAMA,MAAMC,UAAU,GAAG,YAAY;AAC7B,MAAIN,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACS,UAAd,EAAb;AACD;AACF,CAJD;;AAMA,MAAMC,kBAAkB,GAAG,MAAOC,KAAP,IAA2B;AACpD,MAAIR,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACU,kBAAd,CAAiCC,KAAK,IAAI,KAA1C,CAAb;AACD;AACF,CAJD;;AAMA,MAAMC,kBAAkB,GAAG,OAAOC,KAAP,EAA+BF,KAA/B,KAAmD;AAC5E,MAAIR,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACY,kBAAd,CACX,+BAAaC,KAAb,CADW,EAEXA,KAAK,KAAK,aAFC,EAGXF,KAAK,IAAI,KAHE,CAAb;AAKD;AACF,CARD;;AAUA,MAAMG,4BAA4B,GAAG,MAAOD,KAAP,IAAkC;AACrE,MAAIV,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACc,4BAAd,CACX,+BAAaD,KAAb,CADW,CAAb;AAGD;AACF,CAND;;AAQA,MAAME,gCAAgC,GAAG,MAAOC,eAAP,IAAqC;AAC5E,MAAIb,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACe,gCAAd,CACXC,eAAe,IAAI,KADR,CAAb;AAGD;AACF,CAND;;AAQA,MAAMC,UAAU,GAAG,MAAOC,MAAP,IAA4B;AAC7C,MAAIf,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,MAAMJ,aAAa,CAACiB,UAAd,CAAyBC,MAAM,IAAI,KAAnC,CAAb;AACD;AACF,CAJD;;AAMA,IAAIC,mBAAmB,GAAG;AACxBjB,EAAAA,cADwB;AAExBG,EAAAA,cAFwB;AAGxBC,EAAAA,QAHwB;AAIxBC,EAAAA,SAJwB;AAKxBC,EAAAA,eALwB;AAMxBC,EAAAA,UANwB;AAOxBC,EAAAA,kBAPwB;AAQxBE,EAAAA,kBARwB;AASxBE,EAAAA,4BATwB;AAUxBC,EAAAA,gCAVwB;AAWxBE,EAAAA;AAXwB,CAA1B;eAceE,mB","sourcesContent":["import { NativeModules, Platform, processColor } from 'react-native';\n\nconst { NavigationBar } = NativeModules;\n\nconst navigationHide = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationHide();\n  }\n};\n\nconst navigationShow = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationShow();\n  }\n};\n\nconst leanBack = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.leanBack();\n  }\n};\n\nconst immersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.immersive();\n  }\n};\n\nconst stickyImmersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.stickyImmersive();\n  }\n};\n\nconst lowProfile = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.lowProfile();\n  }\n};\n\nconst lightNavigationBar = async (light?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.lightNavigationBar(light || false);\n  }\n};\n\nconst setNavigationColor = async (color: string | number, light?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationColor(\n      processColor(color),\n      color === 'translucent',\n      light || false\n    );\n  }\n};\n\nconst setNavigationBarDividerColor = async (color: string | number) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarDividerColor(\n      processColor(color)\n    );\n  }\n};\n\nconst setNavigationBarContrastEnforced = async (enforceContrast?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarContrastEnforced(\n      enforceContrast || false\n    );\n  }\n};\n\nconst fullScreen = async (enable?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.fullScreen(enable || false);\n  }\n};\n\nvar SystemNavigationBar = {\n  navigationHide,\n  navigationShow,\n  leanBack,\n  immersive,\n  stickyImmersive,\n  lowProfile,\n  lightNavigationBar,\n  setNavigationColor,\n  setNavigationBarDividerColor,\n  setNavigationBarContrastEnforced,\n  fullScreen,\n};\n\nexport default SystemNavigationBar;\n"]}